Angular 2 Extended

INSTALLATION
npm install -g angular-cli
If error then brew upgrade node
npm install -g typescript    - npm list -g typescript - check if installed
npm install bower -g     -    npm list -g bower - check if installed

NEW-PROJECT SETUP
ng new online-store
bower init    - add /bower_components to ignore
bower install bootstrap --save   
      - angular-cli.json  under apps/styles   add "../bower_components/bootstrap/dist/css/bootstrap.css"
          
SETUP FROM CLONE
npm install -g angular-cli (only at school)
npm install
bower install
apm install atom-typescript
      
BUILDING AND SERVING
ng serve
ng lint - check for errors


WORKFLOW

CREATE ROUTING     
app.routing.ts - create file manually in app
               - import ModuleWithProviders + Routes, RouterModule
               - 3 parts import, const and export
app.module.ts - import { routing } from './app.routing'; + add "routing" to imports
     
ROUTING TO WELCOME/HOME
ng g component welcome
welcome.comp.ts - remove constructor and ngOnInit + implements OnInit
welcome.comp.html - add html code
app.routing.ts - import { WelcomeComponent } from + path and component to appRoutes array
app.module.ts - add WelcomeComponent to import and declarations (auto does this)
app.comp.html - add <router-outlet for homepage content

ROUTING TO ABOUT
ng g component about
about.comp.ts - remove constructor and ngOnInit + implements OnInit
about.comp.html - add html code
app.routing.ts - add import { AboutComponent } from + path and component to appRoutes array
app.comp.html - add <a routerLink="about"

ADDING A Model - ALBUM
ng g class album.model
app/album.model.ts - add export class Albu, { constructor
app/marketplace/marketplace.comp.ts - import album + albums object with values
marketplace.comp.html - add ngfor to loop album info

ROUTING TO MARKETPLACE
ng g component marketplace
marketplace.comp.ts - remove constructor and ngOnInit + implements OnInit - LEAVE
marketplace.comp.html - add html code
app.routing.ts - add import { MarketplaceComponent } from + path and component to appRoutes array
app.comp.html - add <a routerLink="marketplace"

ROUTING TO DETAIL PAGE
ng g component album-detail
app.routing.ts - import AlbumDetailComponent + path/component
marketplace.comp.html - (click)="goToDetailPage(album)"
marketplace.comp.ts - goToDetailPage function
                    -  import Router + constructor(private router: Router
                    
PASSING DATA IN SO COMPONENT CAN USE IT - SINGLE ID for Routing
album-detail.comp.ts - import ActivatedRoute, Params, + Location + Album
album-detail.comp.html - {{(albumToDisplay | async)?.name}} (is Refactored)
album-detail.comp.ts - add constructor(private route: ActivatedRoute + Location (is not Refactored)
album-detail.comp.ts - add this.route.params,forEach  => this.albumId....id (is not Refactored)

DEPENDENCY INJECTION - SERVICE - INJECTOR - PROVIDERS
ng g service album.service
album.service.ts - import, Injectable from
                 - getAlbums()
marketplace-comp.ts - import AlbumService + private albumService: AlbumService + providers: [AlbumService]
                    - import OnInit + implements OnInit + ngOnInit() { this.albums = this.albumService.getAlbums(); 
album-detail.comp.ts - import AlbumService + providers [Album + privatealbum in constructor
album.service.ts - getAlbumById
(Assuming you made component) album-detail.com.ts - albumToDisplay + add this.albumToDisplay to ngoninit
album-detail.comp.html - add {{albumToDisplay.title

Service allows data to any page.
methods are defined inside service
in page the details need to be you need 3 things. import service, provider, and onInit.

FIREBASE
npm install angularfire2 firebase --save
tsconfig.json - "types": [ "firebase" ]
create app/api-keys.ts - add api key info from firebase
.gitignore - /src/app/api-keys.ts 
app.module.ts - import masterFirebaseConfig + AngularFireModule + export const firebaseConfig = {
              - AngularFireModule.initializeApp(firebaseConfig) to imports in NgModule
add to rules
{
  "rules": {
    ".read": "true",
    ".write": "true"
  }
}

import json to firebase
album-service.ts - import { AngularFire, FirebaseListObservable + albums: FirebaseListObservable<any[]>;
                  - add private angularFire: AngularFire to constructor + this.albums = angularFire.database.list('albums');
                  - update getAlbums() with return this.albums;
 marketplace-com.ts - change albums: Album[] to albums: FirebaseListObservable<any[]>; 
                    - import { AngularFire, FirebaseListObservable } from 'angularfire2';
 SAVING DATA 
 ng g component admin
 app.routing.ts import AdminComp + path/component
 app.comp.html - add routerLink="admin"
 admin.comp.html - add new form + button (click) submitForm
 admin.comp.ts - add submitForm + import { Album } from './../album.model';
 admin.comp.ts  - import { AngularFire, FirebaseObjectObservable } from 'angularfire2';
                - import { AlbumService } from '../album.service';
                - add AlbumService to providers + constructor(private albumService: AlbumService)
album.service.ts - add addAlbum and push to auto add to database
commented out getAlbumById code
admin.comp.ts - add this.albumService.addAlbum(newAlbum); 
              - NOTE album id type needed to change to string + in marketplace.comp needed to remove id and add $key to gotodetail

FINDING AND RETRIEVING FIREBASE ENTRIES TO DETAIL ALBUM
marketplace.comp.ts - change id to $key + remove Album type from clickedalbum parameter
album-service.ts - refactor getAlbumById - return this.angularFire.database.object('/albums/' + albumId);
album-detail.comp.ts - import { FirebaseObjectObservable
                     - change albumId to string
                     - albumToDisplay: FirebaseObjectObservable<Album>;
                     - remove parseInt from forEach
album-detail.comp.html - add async?
marketplace.comp.html - make sure it has | async

UPDATE ENTRIES
ng g component edit-album
admin.comp.html - <app-marketplace></app-marketplace>
marketplace.comp.ts - add currentRoute: string = this.router.url;
marketplace.comp.html - add <div *ngIf="currentRoute === '/admin'">  + {{album.description}} +  <app-edit-album></app-edit-album>
edit-album.html - add edit album form with ngModel
edit-album.comp.ts - import comp,input,oninit, album +   @Input() selectedAlbum;
marketplace.comp.html - <app-edit-album [selectedAlbum]="album"
marketplace-comp.html - move (click)="goToDetailPage(album) from div to h3
edit-album.comp.ts     - import { AlbumService
                       - providers: [AlbumService]
                       - private albumService: AlbumService in constructor
album.service.ts - add method updateAlbum(localUpdatedAlbum)
edit-album.comp.html - add button click beginUpdatingAlbum
edit-album.comp.ts - add beginUpdatingAlbum


DELETING ENTRIES
edit-album.comp.html - add <button (click)="beginDeletingAlbum(selectedAlbum)">Delete</button>
edit-album.comp.ts - add beginDeletingAlbum method
      Note -  Make sure Service import and providers and constructor AlbumService exists
album.service.ts - add deleteAlbum method


PIPE FILTER
ng g pipe artist - auto puts ArtistPipe in app.module + ng declarations
artist.pipe.ts  -  import { Pipe, PipeTransform } + import { Album }
                - export   implements PipeTransform
                - @Pipe name, pure
                - transform + loop logic
marketplace.comp.html - | artist in *ngFor
                      - <select> options
                      - (change)="onChange($event.target.value)" added to select
marketplace.com.ts    - filterByArtist: string = "allArtists";
                      -   onChange(optionFromMenu) method






