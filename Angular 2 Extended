Angular 2 Extended

INSTALLATION
npm install -g angular-cli
If error then brew upgrade node
npm list -g typescript to see if it is installed. if not then npm install -g typescript
npm list -g bower   or  npm install bower -g


NEW-PROJECT SETUP
ng new online-store
bower init    - add /bower_components to ignore
bower install bootstrap --save     - for all front end dependencies
      - angular-cli.json  under apsps/styles   add "../bower_components/bootstrap/dist/css/bootstrap.css"
          
SETUP FROM CLONE
npm install -g angular-cli (only at school)
npm install
bower install
      
BUILDING AND SERVING
ng serve
ng lint - check for errors


WORKFLOW
ng g component welcome
      - remove extra onInit and constructor code
      - example  - ng g pipe pipe-name 
      - example ng g class class-name.model
CREATE ROUTING     
      - app.routing.ts - create file manually in app
      - import ModuleWithProviders + Routes, RouterModule
      - 3 parts import, const and export
      app.module.ts - import "routing from" + add "routing" to imports
     
ROUTING TO WELCOME/HOME PAGE
ng g component welcome
welcome.comp.ts - remove constructor and ngOnInit + implements OnInit
welcome.comp.html - add html code
app.routing.ts - import { WelcomeComponent } from + path and component to appRoutes array
app.module.ts - add WelcomeComponent to import and declarations (May be auto)
app.comp.html - add <router-outlet for homepage content

ROUTING TO ABOUT
ng g component about
about.comp.ts - remove constructor and ngOnInit + implements OnInit
about.comp.html - add html code
app.routing.ts - add import { AboutComponent } from + path and component to appRoutes array
app.comp.html - add <a routerLink="about"

ROUTING TO MARKETPLACE
ng g component marketplace
marketplace.comp.ts - remove constructor and ngOnInit + implements OnInit
marketplace.comp.html - add html code
app.routing.ts - add import { MarketplaceComponent } from + path and component to appRoutes array
app.comp.html - add <a routerLink="marketplace"

ADDING A Model - ALBUM
ng g class album.model
app/album.model.ts - add export class Albu, { constructor
app/marketplace/marketplace.comp.ts - import album + albums object with values
marketplace.comp.html - add ngfor to loop album info

DYNAMIC ROUTING - DETAIL PAGE
ng g component album-detail
app.routing.ts - import AlbumDetailComponent + path/component
marketplace.comp.html - (click)="goToDetailPage(album)"
marketplace.comp.ts - goToDetailPage function
                    -  import Router + constructor(private router: Router
PASSING DATA T IN SO COMPONENT CAN USE IT - SINGLE ID for Routing
album-detail.comp.ts - import ActivatedRoute, Params + Location + Album
album-detail.comp.html - {{albumId
album-detail.comp.ts - add constructor(private route: ActivatedRoute + Location
album-detail.comp.ts - add this.route.params,forEach  => this.albumId....id

DEPENDENCY INJECTION - SERVICE - INJECTOR - PROVIDERS
injector is responsible to provide service to component car driving person that does something
create mock-albums.ts - add import Album + ALBUMS aray of albums from marketplace.comp.ts
                      - Change beginning of array to export const ALBUMS: Album[]
marketplace.comp.ts - add albums: Album[]; to constructor
ng g service album.service
album.service.ts - import Injectable from + ALBUMS from
                 - getAlbums()
marketplace-comp.ts - import AlbumService + private albumService: AlbumService + providers: [AlbumService]
                    - import OnInit + implements OnInit + ngOnInit() { this.albums = this.albumService.getAlbums(); 
album-detail.comp.ts - import AlbumService + providers [Alb + privatealbum in constructor



