
Second Tutorial on bottom used on stack overflow clone

RAILS AUTHENTICATION - Phase 1
https://www.codecademy.com/learn/rails-auth
github - Timbuk3

Gemfile - gem 'bcrypt', '~> 3.1.7'
bundle install


----- MODEL
app/models/user.rb - class User < ActiveRecord::Base 
                      has_secure_password 
                     end
rails g migration create_users
db/migrate/201etc -       t.string :first_name
                          t.string :last_name
                          t.string :email
                          t.string :password_digest       
rake db:migrate


------ SIGNUP
routes.rb - 
      get 'signup'  => 'users#new' 
      resources :users
      
app/models/user.rb -
      class User < ApplicationRecord
        has_secure_password  
      end


app/views/users/new.html.erb - form_for
    <%= form_for(@user) do |f| %>
      <%= f.text_field :first_name, :placeholder => "First name" %>
      <%= f.text_field :last_name, :placeholder => "Last name" %>
      <%= f.email_field :email, :placeholder => "Email" %>
      <%= f.password_field :password, :placeholder => "Password" %>
      <%= f.submit "Create an account", class: "btn-submit btn" %>
    <% end %>
    
app/users_controller.rb  - 
      class UsersController < ApplicationController
        def new
         @user = User.new
       end
       def create 
         @user = User.new(user_params) 
         if @user.save 
            session[:user_id] = @user.id 
            redirect_to '/' 
        else 
           redirect_to '/signup' 
          end 
        end
        private
       def user_params
          params.require(:user).permit(:first_name, :last_name, :email, :password)
       end
      end

rails console
User.all        - double check creating successfully
exit
localhost:3000/signup for test


------ LOGIN
rails g controller Sessions - do this manually
FILES MANUALLY
app/controllers/sessons_controller.rb
app/views/sessons
spec/controllers/sessons_controller_spec.rb
app/helpers/sessons_helper.rb - may not need
spec/helpers/sessions_helper_spec.rb  - may not need

controllers/sessions_controller.rb -
      class SessionsController < ApplicationController
       def new
        end
       def create
         @user = User.find_by_email(params[:session][:email])
          if @user && @user.authenticate(params[:session][:password])
           session[:user_id] = @user.id
           redirect_to '/'
          else
           redirect_to 'login'
         end
       end
      end

routes.rb -
      get 'login' => 'sessions#new'
      post 'login' => 'sessions#create'
            
views/sessions/new.html.erb - 
       <%= form_for(:session, url: login_path) do |f| %>
         <%= f.email_field :email, :placeholder => "Email" %>
         <%= f.password_field :password, :placeholder => "Password" %>
         <%= f.submit "Log in", class: "btn-submit" %>
      <% end %>

test with localhost:3000/login


------ LOGOUT
routes.rb -   delete 'logout' => 'sessions#destroy'

controllers/sessions_controller.rb - 
      def destroy
        session[:user_id] = nil
        redirect_to '/'
      end
  
  

------ LIMITING ACCESS TO SPECIFIC PAGES
app/controllers/application_controller.rb - 
      class ApplicationController < ActionController::Base
           protect_from_forgery with: :exception
           helper_method :current_user
       
         def current_user
           @current_user ||= User.find(session[:user_id]) if session[:user_id]
         end

          def require_user
           redirect_to '/login' unless current_user
         end
      end

controllers/products_controller.rb - (Example of page to require login)
   before_action :require_user, only: [:index, :show]
  
app/views/layouts/application.html.erb -
          <% if current_user %> 
            <ul> 
              <li><%= current_user.email %></li> 
             <li><%= link_to "Log out", logout_path, method: "delete" %></li> 
            </ul> 
          <% else %> 
           <ul> 
             <li><%= link_to "Login", 'login' %></a></li> 
             <li><%= link_to "Signup", 'signup' %></a></li> 
           </ul> 
          <% end %>
          
          
----- HOME PAGE
routes.rb
    get '/' => 'home#index'
controllers/home_controller.rb -   def index end

views/home/index.html.erb - <h1>


Extra Resource
https://nycda.com/blog/basic-user-authentication-model-in-rails-4/


--------- RAILS AUTHORIZATION PERMISSIONS - PHASE 2


rake db:rollback or rails g migration add_roles - users need column  
db/migrate/201etc - t.string :role
rake db:migrate

app/models/user.rb -    
   def editor?
     self.role == 'editor'
   end

   def admin?
     self.role == 'admin'
   end
   
 db/seeds.rb - 
    mateo = User.create(first_name: 'Mateo', last_name: 'Lazo', email: 'mateo@email.com', password: 'Mateo1', password_confirmation: 'Mateo1', role: 'editor')
    julian = User.create(first_name: 'Julian', last_name: 'Jones', email: 'julian@email.com', password: 'Julian1', password_confirmation: 'Julian1')
    freida = User.create(first_name: 'Freida', last_name: 'Gray', email: 'freida@email.com', password: 'Freida1', password_confirmation: 'Freida1', role: 'admin')
 rake db:seed

app/controllers/application_controller.rb -
    def require_editor
     redirect_to '/' unless current_user.editor?
    end
    def require_admin
     redirect_to '/' unless current_user.admin? 
    end

controllers/products_controller.rb
    before_action :require_user, only: [:show, :edit, :update, :destroy]
    before_action :require_editor, only: [:show, :edit] #only allow users with editor role to access the show and edit actions
    before_action :require_admin, only: [:show, :edit, :destroy]


app/views/products/show.html - showing edit link if user is an admin
  <% if current_user && current_user.editor? %>   method to display an edit link only if a user is an editor
     <%= link_to "Edit", edit_product_path(@recipe.id) %> 
  <% end %>

rails c - test if user is an admin
    freida = User.find_by(email: 'freida@email.com') 
    freida.admin?

 app/views/products/show.html.erb - Showing Delete link only if user is an admin
     <% if current_user && current_user.admin? %> 
     <%= link_to "Delete", product_path(@product), method: "delete" %>
    <% end %>
    
    
------ NEW AUTHENTICATION WITH BYCRYPT

https://nycda.com/blog/basic-user-authentication-model-in-rails-4/

Gemfile -
  gem 'bcrypt-ruby', '~> 3.1.5', require: "bcrypt"
  bundle install
  
config/environments/test.rb -
  config.eager_load = false

controllers/application_controller.rb -
  protect_from_forgery with: :exception
  def current_user
    @current_user ||= User.find(session[:user_id]) if session[:user_id] # Basically, if session[:user_id] is set, find the User with that id. The @current_user ||= part of the method will cache the current user inside of the @current_user instance variable so we don't have to make a database call each time the method is called.
  end
  helper_method :current_user
  
sessions_controller.rb -
  def new
    render :login
  end
  def create
      #try to authenticate the user - if they authenticate successfully, an instance of the User model is returned
    @user = User.authenticate(params[:email], params[:password])
      #if an instance is returned and @user is not nil...
    if @user
      #let the user know they've been logged in with a flash message
      flash[:notice] = "You've been logged in."
      #THIS IS THE MOST IMPORTANT PART. Actually log the user in by storing their ID in the session hash with the [:user_id] key!
      session[:user_id] = @user.id
      #then redirect them to the homepage
      redirect_to "/"
    else
      #whoops, either the user wasn't in the database or their password is incorrect, so let them know, then redirect them back to the log in page
      flash[:alert] = "There was a problem logging you in."
      redirect_to log_in_path
    end
  end
    def destroy
      session[:user_id] = nil
      flash[:notice] = "You've been logged out successfully."
      redirect_to "/"
    end
    
 controllers/users_controller.rb - 
  def login
  end
  def signup
  end
  def new
    render :signup
  end
  def create
    @user = User.new(user_params)
    if @user.save
      flash[:notice] = "Welcome to the site!"
      redirect_to "/"
    else
      flash[:alert] = "There was a problem creating your account. Please try again."
      redirect_to :back
    end
  end
  private
    def user_params
      params.require(:user).permit(:email, :password, :password_confirmation)
    end
  
models/user.rb -
    attr_accessor :password #What this means is that a new instance of User can be created with all of the data from our sign up form and we can store a password on this instance without having a database column back it.
      validates_confirmation_of :password
      before_save :encrypt_password
      def encrypt_password
        self.password_salt = BCrypt::Engine.generate_salt
        self.password_hash = BCrypt::Engine.hash_secret(password, password_salt)
      end
      def self.authenticate(email, password)
        user = User.where(email: email).first
       if user && user.password_hash == BCrypt::Engine.hash_secret(password, user.password_salt)
         user
       else
         nil
       end
      end
      
 views/layouts/application.html.erb -
 <% if current_user %>
            <ul>
              <li><%= current_user.email %></li>
             <li><%= link_to "Log-out", log_out_path, method: "get" %></li>
            </ul>
          <% else %>
           <ul>
             <li><%= link_to "Log-in", log_in_path %></a></li>
             <li><%= link_to "Signup", new_user_path %></a></li>
           </ul>
          <% end %>

views/questions/index.html -
    <% if current_user %>
    <%= current_user.email %>
    <% else %>
      nobody logged in
    <% end %>
    
views/sessions/login.html.erb -
    <%=form_tag log_in_path do%>
    <%=label_tag :email %>
    <%=text_field_tag :email %>
    <%=label_tag :password %>
    <%=password_field_tag :password %>
    <%=submit_tag "Log in" %>
    <%end%>
    
views/users/signup.html.erb
    <%= form_for User.new do |f| %>
    <%= f.label :email %>
    <%= f.text_field :email %>
    <%= f.label :password %>
    <%= f.password_field :password %>
    <%= f.label :password_confirmation %>
    <%= f.password_field :password_confirmation %>
    <%= f.submit "Sign Up" %>
    <%end%>

config/routes.rb
    Rails.application.routes.draw do
    root :to => 'sessions#new'
    get "/log-in" => "sessions#new"
    post "/log-in" => "sessions#create"
    get "/log-out" => "sessions#destroy", as: :log_out #custom path

    resources :users

    resources :outfits do
     # resources :comment
    end

    end



