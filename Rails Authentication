
RAILS AUTHENTICATION - Phase 1
https://www.codecademy.com/learn/rails-auth
github - Timbuk3

Gemfile - gem 'bcrypt', '~> 3.1.7'
bundle install


----- MODEL
app/models/user.rb - class User < ActiveRecord::Base 
                      has_secure_password 
                     end
rails g migration create_users
db/migrate/201etc -       t.string :first_name
                          t.string :last_name
                          t.string :email
                          t.string :password_digest       
rake db:migrate


------ SIGNUP
routes.rb - 
      get 'signup'  => 'users#new' 
      resources :users
      
app/models/user.rb -
      class User < ApplicationRecord
        has_secure_password  
      end


app/views/users/new.html.erb - form_for
    <%= form_for(@user) do |f| %>
      <%= f.text_field :first_name, :placeholder => "First name" %>
      <%= f.text_field :last_name, :placeholder => "Last name" %>
      <%= f.email_field :email, :placeholder => "Email" %>
      <%= f.password_field :password, :placeholder => "Password" %>
      <%= f.submit "Create an account", class: "btn-submit btn" %>
    <% end %>
    
app/users_controller.rb  - 
      class UsersController < ApplicationController
        def new
         @user = User.new
       end
       def create 
         @user = User.new(user_params) 
         if @user.save 
            session[:user_id] = @user.id 
            redirect_to '/' 
        else 
           redirect_to '/signup' 
          end 
        end
        private
       def user_params
          params.require(:user).permit(:first_name, :last_name, :email, :password)
       end
      end

rails console
User.all        - double check creating successfully
exit
localhost:3000/signup for test


------ LOGIN
rails g controller Sessions - do this manually
FILES MANUALLY
app/controllers/sessons_controller.rb
app/views/sessons
spec/controllers/sessons_controller_spec.rb
app/helpers/sessons_helper.rb - may not need
spec/helpers/sessions_helper_spec.rb  - may not need

controllers/sessions_controller.rb -
      class SessionsController < ApplicationController
       def new
        end
       def create
         @user = User.find_by_email(params[:session][:email])
          if @user && @user.authenticate(params[:session][:password])
           session[:user_id] = @user.id
           redirect_to '/'
          else
           redirect_to 'login'
         end
       end
      end

routes.rb -
      get 'login' => 'sessions#new'
      post 'login' => 'sessions#create'
            
views/sessions/new.html.erb - 
       <%= form_for(:session, url: login_path) do |f| %>
         <%= f.email_field :email, :placeholder => "Email" %>
         <%= f.password_field :password, :placeholder => "Password" %>
         <%= f.submit "Log in", class: "btn-submit" %>
      <% end %>

test with localhost:3000/login


------ LOGOUT
routes.rb -   delete 'logout' => 'sessions#destroy'

controllers/sessions_controller.rb - 
      def destroy
        session[:user_id] = nil
        redirect_to '/'
      end
  
  

------ LIMITING ACCESS TO SPECIFIC PAGES
app/controllers/application_controller.rb - 
      class ApplicationController < ActionController::Base
           protect_from_forgery with: :exception
           helper_method :current_user
       
         def current_user
           @current_user ||= User.find(session[:user_id]) if session[:user_id]
         end

          def require_user
           redirect_to '/login' unless current_user
         end
      end

controllers/products_controller.rb - (Example of page to require login)
   before_action :require_user, only: [:index, :show]
  
app/views/layouts/application.html.erb -
          <% if current_user %> 
            <ul> 
              <li><%= current_user.email %></li> 
             <li><%= link_to "Log out", logout_path, method: "delete" %></li> 
            </ul> 
          <% else %> 
           <ul> 
             <li><%= link_to "Login", 'login' %></a></li> 
             <li><%= link_to "Signup", 'signup' %></a></li> 
           </ul> 
          <% end %>
          
          
----- HOME PAGE
routes.rb
    get '/' => 'home#index'
controllers/home_controller.rb -   def index end

views/home/index.html.erb - <h1>


Extra Resource
https://nycda.com/blog/basic-user-authentication-model-in-rails-4/


--------- RAILS AUTHORIZATION PERMISSIONS - PHASE 2









