Rails Ajax

4 parts you need to get.

1. html link needs an ID + remote true for future js to hide
2. controller needs format direction   in def create or wherever
3. new.js.erb file needs to exist so route can go there. This file hides the new link and renders a form inline




app/views/lists/show.html.erb
    add ID to ul - <ul id='list_tasks'>
    add ID to edit -    task), id: "edit_task_btn",:class => "btn btn-default", remote: true
    add ID to new task - <%= ...... new_list_task_path(@list), id: "new_task_link", class: "btn btn-default", remote: true %>
    
tasks/_form -
     <%= form_for [@list, @task], remote: true  do |f| %>


app/controllers/tasks_controllers.rb
     def create
       @list = List.find(params[:list_id])
       @task = @list.tasks.new(task_params)
       if @task.save
         flash[:notice] = "Task successfully added!"
         respond_to do |format|
            format.html { redirect_to list_path(@task.list) }
           format.js
          end
        else
          render :new
       end
     end
     
 create.js.erb
        $('form').remove();
        $('#new_task_link').show();
        $('ul p').remove();
        $('#list_tasks').append('<li><%= @task.description %> | <%= link_to "Edit", edit_list_task_path(@list, @task), :class => "btn btn-default" %> | <%= link_to "Delete", list_task_path(@list, @task),
                                 :data => {:confirm => "Are you sure?",
                                 :method => "delete"},
                                 :class => "btn btn-danger" %></li>')
                                 
  edit.js.erb
        $('#edit_task_btn').hide().after('<%= j render("form") %>')
        
        
 new.js.erb
        $('#new_task_link').hide().after('<%= j render("form") %>')
        
 

