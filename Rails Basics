DATABASE BASIC OVERVIEW
  psql to start psql server - auto at home - postgres
  CREATE DATABASE: to_do;
  DROP DATABASE to_do; - first \c to default database
  \l to list 
  \c to_do;   connect
  \d to
  \q to quit
 
  REMINDER
      CREATE TABLE contacts (name varchar, age int, birthday timestamp);
      ALTER TABLE contacts ADD family boolean;
      ALTER TABLE contacts DROP family;
      ALTER TABLE contacts ADD id serial PRIMARY KEY;
      INSERT INTO contacts (name, age, birthday) VALUES ('Wes', 43, '1969-05-01');
      INSERT INTO contacts (name, age, birthday) VALUES ('Wes', 43, '1969-05-01') RETURNING id;
      SELECT name FROM contacts;
      SELECT name, birthday FROM contacts;
      SELECT * FROM contacts;
      SELECT * FROM contacts WHERE age >= 18;
      SELECT * FROM contacts WHERE age BETWEEN 13 AND 17;
      SELECT * FROM contacts WHERE name LIKE 'We%';
      SELECT * FROM contacts WHERE NOT age >= 18;
      UPDATE contacts SET name = 'Wes Anderson' WHERE id = 1;
      DELETE FROM contacts WHERE id = 1;


INSTALL RAILS
gem install rails
rails new to_do -d postgresql -T    - tells Rails to use Postgres for the database, and -T tells it not to install its testing tools - by default, it uses a library called test-unit, whereas we use RSpec
.railsrc in your home directory     -   -d postgresql -T   - makes not installing testing tools default

NEW PROJECT
rails new your_app_name    - after test override
bundle  - bundle install - bundle exec install?
rails generate rspec:install
spec/rails_heler.rb - code block - Shoulda::Matchers.configure do |config|

DATABASE
config/database.yml - confirm it has the databases we want built
rake db:create
rails g migration create_lists - in main terminal  (rails is substituted for rake)
db/migrate/202124124 - add table details to migration file
rake db:migrate
rake db:test:prepare   - will create a schema to reflect your final database
                       - create migrations to modify it. or db:rollback
                       
MODEL
create spec/models/list_spec.rb - add require 'rails_helper' etc
create app/models/list.rb - add class List < ActiveRecord::Base etc

RAILS CONSOLE
rails console or rails c
exit - exit console

STARTING SERVER
rails server


NEW and SAVE
  example - list=List.new
          - list.name="Homework"
          - list.save
CREATE - new and save at the same time
          - List.create(name: "Halloween Party")
VIEW ALL - List.all     - extra commands find, where, first, last

UPDATE and DESTROY
   list=List.first - assigns the first item in the list to var list
   list.update(name: "NEW-NAME")
   list.destroy
   
ROUTES
config/routes.rb - add resources :lists  - sets up 7 restful routes   - rake routes to see

LISTS CONTROLLER
app/controllers/lists_controller.rb -  create overall class ListsController etc
app/views/lists/index.html.erb  - create file in lists  - add code <% @lists.each do |list| %>

SPECIFIC LIST
app/controllers/lists_controller.rb - def show @ list...params [:id]  etc
app/views/lists/show.html.erb - <%= @list.name

CREATE LIST
app/contr/lists_controller.rb - def new @ list etc
app/contr/lists_controller.rb - def create and private def list_params
app/views/lists/new.html.erb - <%= form_for @list do etc  REFACTORED to partial <%= render "form" %>
app/views/lists/new.html.erb - <% @list.errors
app/views/lists/index.html.erb - <%= link_to "New List", new_list_path %>

UPDATE
app/contr/lists_controller.rb - def edit 
app/views/lists/edit.html.erb - create file then add <%= form_for code REFACTORED to partial <%= render "form" %>
app/contr/lits_controller.rb - def update

PARTIALS FOR ERRORS AND FORM
app/views/layouts/_errors.html.erb - <% if object.errors etc
app/views/lists/_forms.html.erb - <%= render "layouts/errors etc

DELETE
app/views/lists/show.html.erb - add <%= link_to "Delete"
app/contr/lists_controller.rb - def destroy



           
